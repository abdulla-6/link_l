//
//  main.cpp
//  linked_list
//
//  Created by Abdulla on 11/28/24.
//
#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
};

Node* head = nullptr;

void addNodeAtEnd(int value) {
    Node* newNode = new Node();
    newNode->data = value;
    newNode->next = nullptr;

    if (head == nullptr) {
        head = newNode;
    } else {
        Node* temp = head;
        while (temp->next != nullptr) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

void addNodeAtBeginning(int value) {
    Node* newNode = new Node();
    newNode->data = value;
    newNode->next = head;
    head = newNode;
}

void addNodeAtPosition(int value, int position) {
    Node* newNode = new Node();
    newNode->data = value;

    if (position == 1) {
        newNode->next = head;
        head = newNode;
        return;
    }

    Node* temp = head;
    for (int i = 1; i < position - 1 && temp != nullptr; i++) {
        temp = temp->next;
    }

    if (temp == nullptr) {
        cout << "Position out of bounds.\n";
        delete newNode;
    } else {
        newNode->next = temp->next;
        temp->next = newNode;
    }
}

void deleteFirstNode() {
    if (head == nullptr) {
        cout << "The list is empty.\n";
        return;
    }
    Node* temp = head;
    head = head->next;
    delete temp;
}

void deleteNodeAtPosition(int position) {
    if (head == nullptr) {
        cout << "The list is empty.\n";
        return;
    }

    if (position == 1) {
        Node* temp = head;
        head = head->next;
        delete temp;
        return;
    }

    Node* temp = head;
    for (int i = 1; i < position - 1 && temp->next != nullptr; i++) {
        temp = temp->next;
    }

    if (temp->next == nullptr) {
        cout << "Position out of bounds.\n";
    } else {
        Node* nodeToDelete = temp->next;
        temp->next = nodeToDelete->next;
        delete nodeToDelete;
    }
}

void searchNodeAtPosition(int position) {
    Node* temp = head;
    for (int i = 1; i < position && temp != nullptr; i++) {
        temp = temp->next;
    }

    if (temp == nullptr) {
        cout << "Position out of bounds.\n";
    } else {
        cout << "Node at position " << position << " has value: " << temp->data << "\n";
    }
}

void displayLinkedList() {
    if (head == nullptr) {
        cout << "The list is empty.\n";
        return;
    }

    Node* temp = head;
    while (temp != nullptr) {
        cout << temp->data << " -> ";
        temp = temp->next;
    }
    cout << "NULL\n";
}

int main() {
    int choice, value, position;

    do {
        cout << "\nMenu:\n";
        cout << "1. Add a node at the end\n";
        cout << "2. Add a node at the beginning\n";
        cout << "3. Add a node at a specific position\n";
        cout << "4. Delete the first node\n";
        cout << "5. Delete a node at a specific position\n";
        cout << "6. Search for a node at a specific position\n";
        cout << "7. Display the Linked list\n";
        cout << "8. Exit\n";
        cout << "Your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter value to add at the end: ";
                cin >> value;
                addNodeAtEnd(value);
                break;
            case 2:
                cout << "Enter value to add at the beginning: ";
                cin >> value;
                addNodeAtBeginning(value);
                break;
            case 3:
                cout << "Enter value to add: ";
                cin >> value;
                cout << "Enter position: ";
                cin >> position;
                addNodeAtPosition(value, position);
                break;
            case 4:
                deleteFirstNode();
                break;
            case 5:
                cout << "Enter position to delete: ";
                cin >> position;
                deleteNodeAtPosition(position);
                break;
            case 6:
                cout << "Enter position to search: ";
                cin >> position;
                searchNodeAtPosition(position);
                break;
            case 7:
                displayLinkedList();
                break;
            case 8:
                cout << "Exiting...\n";
                break;
            default:
                cout << "Invalid choice. Try again.\n";
        }
    } while (choice != 8);

    return 0;
}
